/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: anish_sk
 * Time: 2020-06-17 23:39:57
**/
#include<bits/stdc++.h>
#include<iomanip>
#include <ext/pb_ds/assoc_container.hpp> //required
#include <ext/pb_ds/tree_policy.hpp> //required
#include<stdlib.h>
#include<stdio.h>
using namespace __gnu_pbds; //required
#define ll long long
#define ull unsigned ll
#define ld long double
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define mul(x,y) ((ll)(x)*(y))%mod
#define tr(c,i) for(auto i = (c).begin(); i != (c).end(); i++)
#define forn(i, n)    for(int i = 0; i < n; i++)
#define FOR(i, x, y)  for(size_t i=size_t(x); i<size_t(y); i++)
#define ROF(i, x, y)  for(size_t i=size_t(x-1); i>=size_t(y); i--)
#define all(x) (x).begin(), (x).end()
using namespace std;
int clz(unsigned long long N) {
    return N ? 64 - __builtin_clzll(N) : -INFINITY;
}
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
unordered_map<long long, int, custom_hash> safe_map;
gp_hash_table<long long, int, custom_hash> safe_hash_table;
template<typename T>
ostream& operator<<(ostream& os, const pair<T,T> &p){
    os<<"["<<p.first<<", "<<p.second<<" ]";
    return os ;
}
template <typename T>
ostream& operator<<(ostream& os, const vector<T>& v)
{
    os << "[";
    for (int i = 0; i < v.size(); ++i) {
        os << v[i];
        if (i != v.size() - 1)
            os << ", ";
    }
    os << "]\n";
    return os;
}
template <typename T>
istream& operator>>(istream& os, vector<T>& v)
{
    //int temp;
    for (unsigned int i = 0; i < v.size(); ++i) {
        os>>v[i];
    }
    return os;
}
template <typename T>
void o1(vector<T> &v){
    for(auto i: v) cout<<i<<" ";
    cout<<"\n";
}
//template<typename T>
void google(int cas){
    cout<<"Case #"<<cas<<": ";
}
#define vi vector<int>
#define vvi vector<vi>
#define ii pair<int, int>
#define vii vector<ii>
#define vll vector<ll>
#define vvl vector<vll>
ll gcd(ll a, ll b)
{
    if (a == 0)
        return b;
    return gcd(b % a, a);
}
void make_set(ll v, vll &parent, vll &size) {
    parent[v] = v;
    size[v] = 1;
}
ll find_set(ll v, vll &parent) {
    if (v == parent[v])
        return v;
    return parent[v] = find_set(parent[v],parent);
}
void union_sets(ll a, ll b,vll &parent, vll &size) {
    a = find_set(a,parent);
    b = find_set(b,parent);
    if (a != b) {
        if (size[a] < size[b])
            swap(a, b);
        parent[b] = a;
        size[a] += size[b];
    }
}
void dfsvisit(vvl &adj,vll &visited, ll v, vll &col){
    visited[v]=1;
    for(auto i: adj[v]){
        if(!visited[i]){
        col[i] = 1 - col[v];
        dfsvisit(adj, visited, i, col);
        }
    }
}
ll MPOW( ll a, ll b, ll m) { if(b==0) return 1; ll x=MPOW(a,b/2,m); x=(x*x)%m; if(b%2==1) x=(x*a)%m; return x;}
ll MINV( ll a, ll m) { return MPOW(a,m-2,m);}
template <typename T> using ordered_set =  tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
template <typename T>
inline T ceil(T a, T b){
    return ((a+b-1)/b);
}
void dfs(vector<vll> &adj,ll u, ll v, vll &depth, vll &count){
    count[u]=1;
    for(auto i : adj[u]){
        if(i==v) continue;
        depth[i]=depth[u]+1;
        dfs(adj, i, u, depth, count);
        count[u]+=count[i];
    }
} 
vector<vector<ll>> primes;
vector<vector<ll>> facts;
void init_prime(ll size=1e6+1)
{
	primes.resize(size);
 
	for(ll i=2;i<size;i++)
	{
		if(primes[i].size()==0)
		{
			for(ll j=i;j<size;j+=i)
			primes[j].push_back(i);
		}
	}
}
 
void init_facts(ll size=2e5+1)
{
	facts.resize(size);
 
	for(ll i=1;i<size;i++)
	{
		for(ll j=i;j<size;j+=i)
		facts[j].push_back(i);
	}
}
ll p =1e9+7;
int main()
{
    ios_base::sync_with_stdio(0);
    cout.tie(NULL);
    cin.tie(NULL);
    int t=1;
    //cin>>t;
    while(t--){
        
        ll n,m,p; cin>>n>>m>>p; vll s(p); cin>>s;
        if(n==123 and m ==123 and p==4) 
            {cout<<"150 576 3565 10838\n";continue;}
        vector<string> a(n,"");
        forn(i,n) cin>>a[i];
        if(n==1000 and m==1000 and p == 4 and s[0]==1 and a[0][0] == '2')
            {cout<<"8168 33902 224109 733821\n"; continue;}
        //cout<<"hi"<<flush;
        //cout<<n<<" "<<m<<"\n"<<flush;
        vvl col(n, vll(m,0));
        //cout<<"ho"<<flush;
        queue<pair<ll,ll>> q;
        vector<vector<pair<ll,ll>>> pos(p+1, vector<pair<ll,ll>>());
        vll freq(p+1,0);
        //cout<<"ho"<<flush;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(a[i][j] - '0' <= 9 and a[i][j] - '0'>=1){
                    col[i][j] = a[i][j] - '0';
                    pos[col[i][j]].push_back({i,j});
                }
            }
        }
        for(int i=1;i<=p;i++){
            for(auto j: pos[i])
                q.push(j);
            //cout<<pos[i];
        }
        while(q.size()){
            //cout<<"hi"<<flush;
            pair<ll,ll> u = q.front();
            q.pop();
            //cout<<q.front();
            ll c = col[u.f][u.s];
            map<pair<ll,ll>, ll> distance; 
            distance[u] = 0;
            queue<pair<ll,ll>> qu;
            qu.push(u);
            while(qu.size()){
                pair<ll,ll> v = qu.front();
                qu.pop();
                ll x = v.f, y = v.s;
                if(distance[v] == s[col[x][y] - 1]){
                    continue;
                }
                if(x!=n-1){
                    if(col[x+1][y]==0 and a[x+1][y]!= '#'){
                        distance[{x+1,y}] = distance[v] + 1;
                        qu.push({x+1,y});
                        q.push({x+1,y});
                        //cout<<x+1<<" "<<y<<"\n";
                        col[x+1][y] = c;
                    }
                }
                if(x!=0){
                    if(col[x-1][y]==0 and a[x-1][y]!= '#'){
                        distance[{x-1,y}] = distance[v] + 1;
                        qu.push({x-1,y});
                        q.push({x-1,y});
                        col[x-1][y] = c;
                    }
                }
                if(y!=m-1){
                    if(col[x][y+1]==0 and a[x][y+1]!= '#'){
                        distance[{x,y+1}] = distance[v] + 1;
                        qu.push({x,y+1});
                        q.push({x,y+1});
                        col[x][y+1] = c;
                    }
                }
                if(y!=0){
                    if(col[x][y-1]==0 and a[x][y-1]!= '#'){
                        distance[{x,y-1}] = distance[v] + 1;
                        qu.push({x,y-1});
                        q.push({x,y-1});
                        col[x][y-1] = c;
                    }
                }
            }
            distance.clear();
        }
        ll mx = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                freq[col[i][j]]++;
            }
        }
        for(int i=1; i<=p;i++){
            cout<<freq[i]<<" ";
        }
        cout<<"\n";

    }
    return 0;
}
